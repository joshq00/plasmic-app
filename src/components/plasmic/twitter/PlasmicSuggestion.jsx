// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cmxbiR2DDRv5pf3jozTs35
// Component: JLZ56I7cGHEM
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import Avatar from "../../Avatar" // plasmic-import: zQn5MXmA4Iq4/component
import Button from "../../Button" // plasmic-import: KS2sS7P07Kxk/component
import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_twitter.module.css" // plasmic-import: cmxbiR2DDRv5pf3jozTs35/projectcss
import * as sty from "./PlasmicSuggestion.module.css" // plasmic-import: JLZ56I7cGHEM/css
import image22R4JEb5W3Yh7 from "./images/image2.png" // plasmic-import: 2R4JEb5w3Yh7/picture

export const PlasmicSuggestion__VariantProps = new Array()

export const PlasmicSuggestion__ArgProps = new Array(
  "children",
  "slot",
  "slot2"
)

function PlasmicSuggestion__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root
      )}
    >
      <Avatar
        data-plasmic-name={"avatar"}
        data-plasmic-override={overrides.avatar}
        className={classNames("__wab_instance", sty.avatar)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img___7GeAa)}
              displayHeight={"49px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"49px"}
              src={{
                src: image22R4JEb5W3Yh7,
                fullWidth: 225,
                fullHeight: 223,
                aspectRatio: undefined,
              }}
            />
          ),

          value: args.children,
        })}
      </Avatar>

      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__dplJx
        )}
      >
        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__ySzPx
          )}
        >
          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.freeBox__mUiq
            )}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Matt Wright",
              value: args.slot,
              className: classNames(sty.slotTargetSlot),
            })}
          </div>
        </div>

        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__cE15C
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents: "@mattwright",
            value: args.slot2,
            className: classNames(sty.slotTargetSlot2),
          })}
        </div>
      </div>

      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
      />
    </p.Stack>
  )
}

const PlasmicDescendants = {
  root: ["root", "avatar", "button"],
  avatar: ["avatar"],
  button: ["button"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSuggestion__ArgProps,
      internalVariantPropNames: PlasmicSuggestion__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicSuggestion__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicSuggestion"
  } else {
    func.displayName = `PlasmicSuggestion.${nodeName}`
  }
  return func
}

export const PlasmicSuggestion = Object.assign(
  // Top-level PlasmicSuggestion renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicSuggestion
    internalVariantProps: PlasmicSuggestion__VariantProps,
    internalArgProps: PlasmicSuggestion__ArgProps,
  }
)

export default PlasmicSuggestion
/* prettier-ignore-end */
