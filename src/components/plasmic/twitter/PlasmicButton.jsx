// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cmxbiR2DDRv5pf3jozTs35
// Component: KS2sS7P07Kxk
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_twitter.module.css" // plasmic-import: cmxbiR2DDRv5pf3jozTs35/projectcss
import * as sty from "./PlasmicButton.module.css" // plasmic-import: KS2sS7P07Kxk/css

export const PlasmicButton__VariantProps = new Array("options")

export const PlasmicButton__ArgProps = new Array("children")

function PlasmicButton__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.button,
        projectcss.button,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__options_primary]: hasVariant(
            variants,
            "options",
            "primary"
          ),
        }
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: "Follow",
        value: args.children,
        className: classNames(sty.slotTargetChildren, {
          [sty.slotTargetChildren__options_primary]: hasVariant(
            variants,
            "options",
            "primary"
          ),
        }),
      })}
    </button>
  )
}

const PlasmicDescendants = {
  root: ["root"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButton__ArgProps,
      internalVariantPropNames: PlasmicButton__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicButton"
  } else {
    func.displayName = `PlasmicButton.${nodeName}`
  }
  return func
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps,
  }
)

export default PlasmicButton
/* prettier-ignore-end */
