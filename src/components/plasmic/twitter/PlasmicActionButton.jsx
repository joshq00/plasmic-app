// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cmxbiR2DDRv5pf3jozTs35
// Component: pbv-Mbq112w
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_twitter.module.css" // plasmic-import: cmxbiR2DDRv5pf3jozTs35/projectcss
import * as sty from "./PlasmicActionButton.module.css" // plasmic-import: pbv-Mbq112w/css
import ReplyIcon from "./icons/PlasmicIcon__Reply" // plasmic-import: vBJ7i4cXFTFW/icon

export const PlasmicActionButton__VariantProps = new Array("options")

export const PlasmicActionButton__ArgProps = new Array("children", "slot")

function PlasmicActionButton__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {})
  const triggers = {
    hover_root: isRootHover,
  }

  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.button,
        projectcss.button,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__options_labeled]: hasVariant(
            variants,
            "options",
            "labeled"
          ),

          [sty.root__options_large]: hasVariant(variants, "options", "large"),
          [sty.root__options_medium]: hasVariant(variants, "options", "medium"),
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__wjhb,
          {
            [sty.freeBox__options_large__wjhb3Auo]: hasVariant(
              variants,
              "options",
              "large"
            ),

            [sty.freeBox__options_medium__wjhbKyVg7]: hasVariant(
              variants,
              "options",
              "medium"
            ),
          }
        )}
      >
        {(triggers.hover_root ? true : true) ? (
          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.freeBox__c7Jk,
              {
                [sty.freeBox__options_labeled__c7Jk1Pw4E]: hasVariant(
                  variants,
                  "options",
                  "labeled"
                ),

                [sty.freeBox__options_medium__c7JkkyVg7]: hasVariant(
                  variants,
                  "options",
                  "medium"
                ),
              }
            )}
          />
        ) : null}
        {p.renderPlasmicSlot({
          defaultContents: (
            <ReplyIcon
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.svg__cZtu
              )}
              role={"img"}
            />
          ),

          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildren__options_medium]: hasVariant(
              variants,
              "options",
              "medium"
            ),

            [sty.slotTargetChildren__options_primary]: hasVariant(
              variants,
              "options",
              "primary"
            ),
          }),
        })}
      </div>

      {(hasVariant(variants, "options", "labeled") ? true : false)
        ? p.renderPlasmicSlot({
            defaultContents: "25",
            value: args.slot,
            className: classNames(sty.slotTargetSlot, {
              [sty.slotTargetSlot__options_labeled]: hasVariant(
                variants,
                "options",
                "labeled"
              ),
            }),
          })
        : null}
    </p.Stack>
  )
}

const PlasmicDescendants = {
  root: ["root"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicActionButton__ArgProps,
      internalVariantPropNames: PlasmicActionButton__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicActionButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicActionButton"
  } else {
    func.displayName = `PlasmicActionButton.${nodeName}`
  }
  return func
}

export const PlasmicActionButton = Object.assign(
  // Top-level PlasmicActionButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicActionButton
    internalVariantProps: PlasmicActionButton__VariantProps,
    internalArgProps: PlasmicActionButton__ArgProps,
  }
)

export default PlasmicActionButton
/* prettier-ignore-end */
