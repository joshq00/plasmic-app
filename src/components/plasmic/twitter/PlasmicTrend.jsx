// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cmxbiR2DDRv5pf3jozTs35
// Component: YgSl-_C-qO67
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_twitter.module.css" // plasmic-import: cmxbiR2DDRv5pf3jozTs35/projectcss
import * as sty from "./PlasmicTrend.module.css" // plasmic-import: YgSl-_C-qO67/css

export const PlasmicTrend__VariantProps = new Array()

export const PlasmicTrend__ArgProps = new Array("children", "slot")

function PlasmicTrend__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.a,
        projectcss.a,
        projectcss.root_reset,
        sty.root
      )}
      component={Link}
      platform={"gatsby"}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox___685NB
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Entertainment",
          value: args.slot,
          className: classNames(sty.slotTargetSlot),
        })}

        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            defaultcss.__wab_text,
            sty.text__kRnSz
          )}
        >
          {"·"}
        </div>

        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            defaultcss.__wab_text,
            sty.text__zKbcg
          )}
        >
          {"Yesterday"}
        </div>
      </p.Stack>

      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__e7I3G
        )}
      >
        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__bpbkx
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents:
              "Adele shares photo supporting Beyoncé's Black is King",
            value: args.children,
            className: classNames(sty.slotTargetChildren),
          })}
        </div>
      </div>
    </p.Stack>
  )
}

const PlasmicDescendants = {
  root: ["root"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTrend__ArgProps,
      internalVariantPropNames: PlasmicTrend__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicTrend__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicTrend"
  } else {
    func.displayName = `PlasmicTrend.${nodeName}`
  }
  return func
}

export const PlasmicTrend = Object.assign(
  // Top-level PlasmicTrend renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicTrend
    internalVariantProps: PlasmicTrend__VariantProps,
    internalArgProps: PlasmicTrend__ArgProps,
  }
)

export default PlasmicTrend
/* prettier-ignore-end */
